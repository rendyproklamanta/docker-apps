# Start with the openappsec agent image
FROM randyproxz/openappsec-agent:nginx

# Set the Alpine repositories
RUN echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories

# Install OpenSSL 1.1.1s
WORKDIR /usr/src
RUN wget https://www.openssl.org/source/openssl-1.1.1s.tar.gz && \
    tar -xvzf openssl-1.1.1s.tar.gz && \
    cd openssl-1.1.1s && \
    ./config --prefix=/opt/build --openssldir=/opt/build shared -fPIC && \
    make -j$(nproc) && \
    make install

# Set OpenSSL environment variables
ENV PKG_CONFIG_PATH=/opt/build/lib/pkgconfig
ENV OPENSSL_CONF=/opt/build/ssl/openssl.cnf

# Install specific version of libxml2 compatible with PHP 7.4
RUN wget http://xmlsoft.org/sources/libxml2-2.9.12.tar.gz && \
    tar -xzf libxml2-2.9.12.tar.gz && \
    cd libxml2-2.9.12 && \
    ./configure --prefix=/usr --without-python && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf libxml2-2.9.12 libxml2-2.9.12.tar.gz

# Remove any conflicting packages if already installed
RUN apk del boost icu || true

# Update and install dependencies
RUN apk update && apk add --no-cache \
    alpine-sdk \
    bash \
    build-base \
    libtool \
    freetds-dev \
    libcouchbase-dev \
    imap-dev \
    libevent-dev \
    libpq-dev \
    openldap-dev \
    cyrus-sasl-dev \
    sqlite-dev \
    wget \
    libpng \
    libpng-dev \
    libjpeg-turbo \
    libjpeg-turbo-dev \
    freetype \
    freetype-dev \
    libzip-dev \
    zlib-dev \
    libxslt-dev \
    libxml2-dev \
    curl-dev \
    libsodium-dev \
    oniguruma-dev \
    icu-dev \
    gettext-dev \
    bzip2-dev \
    libmemcached-dev \
    gcc \
    g++ \
    make \
    autoconf \
    pkgconfig \
    cmake \
    pcre-dev \
    pcre2-dev \
    linux-headers \
    python3 \
    perl-dev \
    gd-dev \
    enchant2 \
    gmp-dev \
    krb5-dev \
    krb5-libs \
    ldb-dev \
    libldap \
    openldap-dev \
    cyrus-sasl-dev \
    util-linux \
    util-linux-dev \
    musl-utils \
    groff \
    openssl-dev \
    acl \
    attr \
    freetds \
    freetds-dev

# Install PHP 7.4.33 from source
RUN curl -fsSL https://www.php.net/distributions/php-7.4.33.tar.gz -o php-7.4.33.tar.gz && \
    tar -xvzf php-7.4.33.tar.gz && \
    cd php-7.4.33 && \
    ./buildconf --force && \
    CFLAGS="-Wno-deprecated-declarations -Wno-incompatible-pointer-types" ./configure \
        --prefix=/usr/local/php \
        --with-config-file-path=/usr/local/php \
        --with-openssl=/opt/build \
        --enable-fpm \
        --enable-soap \
        --enable-sockets \
        --enable-sysvsem \
        --enable-sysvshm \
        --enable-opcache \
        --enable-pcntl \
        --enable-cli \
        --enable-intl \
        --enable-gd \
        --enable-bcmath \
        --enable-calendar \
        --enable-dba \
        --enable-exif \
        --enable-ffi \
        --enable-fileinfo \
        --enable-filter \
        --enable-ftp \
        --enable-mbstring \
        --enable-phar \
        --enable-posix \
        --enable-session \
        --enable-shmop \
        --enable-simplexml \
        --enable-sysvmsg \
        --enable-tidy \
        --enable-tokenizer \
        --enable-xml \
        --enable-xmlreader \
        --enable-xmlwriter \
        --enable-zip \
        --enable-spl \
        --with-bz2 \
        --with-curl \
        --with-zlib \
        --with-mysqli \
        --with-mysqlnd \
        --with-pdo-mysql \
        --with-pdo-pgsql \
        --with-pdo-sqlite \
        --with-pgsql \
        --with-iconv \
        --with-gettext \
        --with-gmp \
        --with-libxml \
        --with-xsl \
        --with-icu-dir=/usr/include/icu \
        --with-redis \
        --with-sodium \
        --with-imagick \
        --with-jpeg \
        --with-freetype \
        --with-odbc \
        --with-standard \
        --with-ldap \
        --with-zip \
    && make -j$(nproc) && make install

# Ensure www-data group and user exist, only add if missing
RUN getent group www-data || addgroup -S www-data && \
    getent passwd www-data || adduser -S www-data -G www-data

# Set up PHP-FPM configuration
RUN mkdir -p /run/php /var/log/php
COPY ./conf/php/www.conf /usr/local/php/etc/php-fpm.d/www.conf
RUN cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf

# Symlink PHP binaries
RUN ln -s /usr/local/php/bin/php /usr/bin/php && \
    ln -s /usr/local/php/bin/phpize /usr/bin/phpize && \
    ln -s /usr/local/php/bin/php-config /usr/bin/php-config && \
    ln -s /usr/local/php/sbin/php-fpm /usr/local/bin/php-fpm

# Install Composer
RUN curl -sS https://getcomposer.org/composer.phar -o /usr/local/bin/composer && chmod +x /usr/local/bin/composer

# Command to run PHP-FPM
CMD ["/usr/local/php/sbin/php-fpm", "-F"]

## BUILD and PUSH -----------------
## docker build -t randyproxz/php7.4-fpm:openappsec -f Dockerfile.agent.php74 .
## docker push randyproxz/php7.4-fpm:openappsec
## --------------------------------